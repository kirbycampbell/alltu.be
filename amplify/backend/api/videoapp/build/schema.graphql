type Video {
  id: ID!
  title: String!
  file: String!
  info: String!
  likes: Int
  unlikes: Int
  tags: String
  posts(filter: ModelPostFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelPostConnection
}

type Post {
  id: ID!
  content: String!
  likes: Int
  video: Video
  comments(filter: ModelCommentFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelCommentConnection
}

type Comment {
  id: ID!
  content: String
  likes: Int
  post: Post
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelVideoConnection {
  items: [Video]
  nextToken: String
}

input ModelStringFilterInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
}

input ModelIDFilterInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
}

input ModelIntFilterInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  contains: Int
  notContains: Int
  between: [Int]
}

input ModelFloatFilterInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  contains: Float
  notContains: Float
  between: [Float]
}

input ModelBooleanFilterInput {
  ne: Boolean
  eq: Boolean
}

input ModelVideoFilterInput {
  id: ModelIDFilterInput
  title: ModelStringFilterInput
  file: ModelStringFilterInput
  info: ModelStringFilterInput
  likes: ModelIntFilterInput
  unlikes: ModelIntFilterInput
  tags: ModelStringFilterInput
  and: [ModelVideoFilterInput]
  or: [ModelVideoFilterInput]
  not: ModelVideoFilterInput
}

type Query {
  getVideo(id: ID!): Video
  listVideos(filter: ModelVideoFilterInput, limit: Int, nextToken: String): ModelVideoConnection
  getPost(id: ID!): Post
  listPosts(filter: ModelPostFilterInput, limit: Int, nextToken: String): ModelPostConnection
  getComment(id: ID!): Comment
  listComments(filter: ModelCommentFilterInput, limit: Int, nextToken: String): ModelCommentConnection
}

input CreateVideoInput {
  id: ID
  title: String!
  file: String!
  info: String!
  likes: Int
  unlikes: Int
  tags: String
}

input UpdateVideoInput {
  id: ID!
  title: String
  file: String
  info: String
  likes: Int
  unlikes: Int
  tags: String
}

input DeleteVideoInput {
  id: ID
}

type Mutation {
  createVideo(input: CreateVideoInput!): Video
  updateVideo(input: UpdateVideoInput!): Video
  deleteVideo(input: DeleteVideoInput!): Video
  createPost(input: CreatePostInput!): Post
  updatePost(input: UpdatePostInput!): Post
  deletePost(input: DeletePostInput!): Post
  createComment(input: CreateCommentInput!): Comment
  updateComment(input: UpdateCommentInput!): Comment
  deleteComment(input: DeleteCommentInput!): Comment
}

type Subscription {
  onCreateVideo: Video @aws_subscribe(mutations: ["createVideo"])
  onUpdateVideo: Video @aws_subscribe(mutations: ["updateVideo"])
  onDeleteVideo: Video @aws_subscribe(mutations: ["deleteVideo"])
  onCreatePost: Post @aws_subscribe(mutations: ["createPost"])
  onUpdatePost: Post @aws_subscribe(mutations: ["updatePost"])
  onDeletePost: Post @aws_subscribe(mutations: ["deletePost"])
  onCreateComment: Comment @aws_subscribe(mutations: ["createComment"])
  onUpdateComment: Comment @aws_subscribe(mutations: ["updateComment"])
  onDeleteComment: Comment @aws_subscribe(mutations: ["deleteComment"])
}

type ModelPostConnection {
  items: [Post]
  nextToken: String
}

input ModelPostFilterInput {
  id: ModelIDFilterInput
  content: ModelStringFilterInput
  likes: ModelIntFilterInput
  and: [ModelPostFilterInput]
  or: [ModelPostFilterInput]
  not: ModelPostFilterInput
}

input CreatePostInput {
  id: ID
  content: String!
  likes: Int
  postVideoId: ID
}

input UpdatePostInput {
  id: ID!
  content: String
  likes: Int
  postVideoId: ID
}

input DeletePostInput {
  id: ID
}

type ModelCommentConnection {
  items: [Comment]
  nextToken: String
}

input ModelCommentFilterInput {
  id: ModelIDFilterInput
  content: ModelStringFilterInput
  likes: ModelIntFilterInput
  and: [ModelCommentFilterInput]
  or: [ModelCommentFilterInput]
  not: ModelCommentFilterInput
}

input CreateCommentInput {
  id: ID
  content: String
  likes: Int
  commentPostId: ID
}

input UpdateCommentInput {
  id: ID!
  content: String
  likes: Int
  commentPostId: ID
}

input DeleteCommentInput {
  id: ID
}
